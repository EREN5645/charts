name: 'Chart testing action'
description: 'Runs chart-testing for linting, instaling and helm template --validate'
inputs:
  changed-charts:  # id of input
    description: 'List of changed charts'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Run chart-testing (lint)
      run: ct lint --target-branch ${{ github.event.repository.default_branch }}

    - name: Create kind cluster
      uses: helm/kind-action@v1.4.0

    - name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@ceee102ec2387dd9e844e01b530ccd4ec87ce955' # v0.8.0
      with:
        workload_identity_provider: projects/1094498259535/locations/global/workloadIdentityPools/gh-charts/providers/github-by-repos
        service_account: 'publish-helm-charts@devopsre.iam.gserviceaccount.com'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

    - name: "Login to Artifact Registry"
      run: |
        set -o errexit

        # desired cluster name; default is "kind"
        KIND_CLUSTER_NAME="chart-testing"
        
        # create a temp file for the docker config
        echo "Creating temporary docker client config directory ..."
        DOCKER_CONFIG=$(mktemp -d)
        export DOCKER_CONFIG
        trap 'echo "Removing ${DOCKER_CONFIG}/*" && rm -rf ${DOCKER_CONFIG:?}' EXIT
        
        echo "Creating a temporary config.json"
        # This is to force the omission of credsStore, which is automatically
        # created on supported system. With credsStore missing, "docker login"
        # will store the password in the config.json file.
        # https://docs.docker.com/engine/reference/commandline/login/#credentials-store
        cat <<EOF >"${DOCKER_CONFIG}/config.json"
        {
          "auths": { "gcr.io": {} }
        }
        EOF
        # login to gcr in DOCKER_CONFIG using an access token
        # https://cloud.google.com/container-registry/docs/advanced-authentication#access_token
        echo "Logging in to GCR in temporary docker client config directory ..."
        gcloud auth application-default print-access-token | \
          docker login -u oauth2accesstoken --password-stdin https://us-west1-docker.pkg.dev
        
        # setup credentials on each node
        echo "Moving credentials to kind cluster name='${KIND_CLUSTER_NAME}' nodes ..."
        for node in $(kind get nodes --name "${KIND_CLUSTER_NAME}"); do
          # the -oname format is kind/name (so node/name) we just want name
          node_name=${node#node/}
          # copy the config to where kubelet will look
          docker cp "${DOCKER_CONFIG}/config.json" "${node_name}:/var/lib/kubelet/config.json"
          # restart kubelet to pick up the config
          docker exec "${node_name}" systemctl restart kubelet.service
        done
        
        echo "Done!"

    - name: Install dependencies - Kong CRDs
      if: contains( ${{ inputs.changed-charts }}, 'charts/kong-celo-fullnode')
      run: |
        kubectl apply -f https://raw.githubusercontent.com/Kong/kong-operator/main/helm-charts/kong/crds/custom-resource-definitions.yaml

    - name: "Templating charts"
      run: |
        for chart in ${{  ${{ inputs.changed-charts }} }}; do
          if [ -d ./${chart} ]; then
            # Only template 'application' charts (libraries cannot be templated)
            if cat "./${chart}/Chart.yaml" | grep -E '^type' | grep 'application' >/dev/null; then
              echo "Templating ${chart}."
              helm template "./${chart}/" -f "./${chart}/values.yaml"
              # Skipping celo-fullnode-backups as kind has not volumesnapshot and gemini cannot be installed
              if [[ "${chart}" != "charts/celo-fullnode-backups" ]]; then
                echo "Validating ${chart} templates."
                # Check against K8s API
                helm template "./${chart}/" -f "./${chart}/values.yaml" --validate
              fi
            fi
          else
            echo "Skipping ${chart} as it seems it has been deleted."
          fi
        done

    - name: Run chart-testing (install)
      run: ct install --target-branch ${{ github.event.repository.default_branch }} --excluded-charts akeyless-gcp-producer
