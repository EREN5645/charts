name: Helm Charts Lint

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      # Run if any of the following files are changed
      - 'charts/**/templates/**'
      - 'charts/**/values.yaml'
      - 'charts/**/Chart.yaml'

env:
  HELM_VERSION: "v3.9.4"
  GOMPLATE_VERSION: "v3.11.3"

jobs:
  helm-lint:
    runs-on: 'ubuntu-latest'
    steps:
      - name: "Checkout current PR"
        uses: actions/checkout@v2

      - name: "Checkout main branch"
        uses: actions/checkout@v2
        with:
          ref: main
          path: main

      - name: "Install Helm"
        uses: azure/setup-helm@v1
        with:
          version: "${{ env.HELM_VERSION }}"

      - name: "Install gomplate binary"
        run: |
          wget -qO gomplate https://github.com/hairyhenderson/gomplate/releases/download/${{ env.GOMPLATE_VERSION }}/gomplate_linux-amd64-slim
          chmod u+x gomplate

      - name: "Get Helm Charts changed"
        uses: jitterbit/get-changed-files@v1
        id: updated_files
        with:
          format: csv
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Dump updated Helm Charts folders and validate semantic versioning"
        run: |
          echo "${{ steps.updated_files.outputs.all }}" | tr "," "\n" | grep 'charts/' | sed 's#^charts/##' | sed 's#/.*$##' | sort | uniq > changed_charts
          if test "$(wc -c < changed_charts)" -gt 2; then
            while read chart; do
              # Get Chart version in the current PR branch
              version=$(awk -F\: '/^version:/ {print $(NF)}' charts/${chart}/Chart.yaml|tr -d " ")

              # Get Chart version in main branch if the chart exists
              if [[ -f main/charts/${chart}/Chart.yaml ]]; then
                version_main=$(awk -F\: '/^version:/ {print $(NF)}' main/charts/${chart}/Chart.yaml|tr -d " ")

                # Calculate valid next versions
                major_main=$(echo ${version_main}| awk -F. '{print $1}')
                major_main_next=$(echo ${major_main} + 1 | bc).0.0
                minor_main=$(echo ${version_main}| awk -F. '{print $2}')
                minor_main_next=${major_main}.$(echo ${minor_main} + 1 | bc).0
                patch_main=$(echo ${version_main}| awk -F. '{print $3}')
                patch_main_next=${major_main}.${minor_main}.$(echo ${patch_main} + 1 | bc)

                # Chart version in current PR must be one of the valid versions
                set +e
                echo "${major_main_next},${minor_main_next},${patch_main_next}" | tr "," "\n" | grep -w "${version}" > /dev/null
                rc=$?
                set -e

                if [ ${rc} -ne 0 ]; then
                  echo "Version specified in charts/${chart}/Chart.yaml is ${version}, which does not follow semantic versioning."
                  echo "It must be a valid next semantic version. For this case, valid semantic versions are:"
                  echo ""
                  echo "- Next valid patch: ${patch_main_next}"
                  echo "- Next valid minor: ${minor_main_next}"
                  echo "- Next valid major: ${major_main_next}"
                  # Allow not semantic versions (this can be caused by releasing helm versions from different branches)
                  # exit 1
                fi
              else
                echo "Chart ${chart} does not exist in branch main, hence skipping semantic version check."
              fi
            done <<EOF
              $(cat changed_charts)
          EOF
          fi

      - name: "Linting charts"
        run: |
          if test "$(wc -c < changed_charts)" -gt 2; then
            while read chart; do
              if [ -d ./charts/${chart} ]; then
                helm dependency update --skip-refresh ./charts/${chart}
                helm lint "./charts/${chart}/" || false
              else
                echo "Skipping charts/${chart} as it seems it has been deleted."
              fi
            done <<EOF
              $(cat changed_charts)
          EOF
          fi

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0

      - name: "Templatint charts"
        run: |
          if test "$(wc -c < changed_charts)" -gt 2; then
            while read chart; do
              if [ -d ./charts/${chart} ]; then
                helm template "./charts/${chart}/" -f "./charts/${chart}/values.yaml"
                # Check against K8s API
                helm template "./charts/${chart}/" -f "./charts/${chart}/values.yaml" --validate
              else
                echo "Skipping charts/${chart} as it seems it has been deleted."
              fi
            done <<EOF
              $(cat changed_charts)
          EOF
          fi
