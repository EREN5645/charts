{{ range .Values.consumers }}
apiVersion: v1
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secret := (lookup "v1" "Secret" $.Release.Namespace (printf "%s-%s-apikey" $.Release.Namespace .) ) | default dict }}
  {{- $keyData := (get $secret "data") | default dict }}
  # set $keySecret to existing secret data or generate a random one when not exists
  {{- $keySecret := (get $keyData "key") | default (randAlphaNum 32 | b64enc) }}
  # generate 32 chars long random string, base64 encode it and then double-quote the result string.
  key: {{ $keySecret | quote }}
  # kongCredType is always key-auth base64 encode
  kongCredType: a2V5LWF1dGg=
kind: Secret
metadata:
  name: {{ $.Release.Name }}-{{ . }}-apikey
  labels:
    app: {{ $.Release.Name }}
type: Opaque
---
{{- end }}
