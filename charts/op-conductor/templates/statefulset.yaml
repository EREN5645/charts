apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "op-conductor.fullname" . }}
  labels:
    {{- include "op-conductor.labels" . | nindent 4 }}
  {{- with .Values.statefulset.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "op-conductor.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "op-conductor.name" . }}
  template:
    metadata:
      labels:
        {{- include "op-conductor.selectorLabels" . | nindent 8 }}
      annotations:
      {{- with .Values.statefulset.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.config.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.config.metrics.port }}"
        prometheus.io/path: "/metrics"
      {{- end }}
    spec:
      initContainers:
      - name: download-rollup
        image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
        imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command: ["sh", "/scripts/download-rollup.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
      - name: split-config-parameters
        image: "{{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}"
        imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command: ["sh", "/scripts/split-config-parameters.sh"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
      containers:
      - name: op-conductor
        command:
        - /bin/sh
        - -c
        args:
        - |
          RID=$(echo $HOSTNAME | sed 's/{{ .Release.Name }}-//')
          datadir="{{ .Values.persistence.mountPath }}"

          bootstrap_flag="--raft.bootstrap=false"
          # Check if we need to bootstrap the raft cluster
          if [ ! -d $datadir/$RID ] && [ "$RID" -eq 2 ]; then
              bootstrap_flag="--raft.bootstrap=true"
          fi
          exec /usr/local/bin/op-conductor \
            --consensus.addr=$POD_IP \
            --consensus.advertised=$(cat $datadir/advertiseIP):{{ .Values.config.consensus.port }} \
            --consensus.port={{ .Values.config.consensus.port }} \
            --execution.rpc=$(cat $datadir/executionUrl) \
            --node.rpc=$(cat $datadir/nodeUrl) \
            --rollup.config=$datadir/rollup.json \
            --rpc.addr={{ .Values.config.rpc.addr }} \
            --rpc.port={{ .Values.config.rpc.port }} \
            {{- if .Values.config.rpc.enableAdmin }}
            --rpc.enable-admin \
            {{- end }}
            {{- if .Values.config.rpc.enableProxy }}
            --rpc.enable-proxy \
            {{- end }}
            $bootstrap_flag \
            {{- if .Values.config.raft.server.id }}
            --raft.server.id={{ .Values.config.raft.server.id }} \
            {{- else }}
            --raft.server.id=$RID \
            {{- end }}
            --raft.storage.dir={{ .Values.persistence.mountPath }} \
            --healthcheck.interval={{ .Values.config.healthcheck.interval }} \
            --healthcheck.min-peer-count={{ .Values.config.healthcheck.minPeerCount }} \
            {{- if .Values.config.healthcheck.safeEnabled }}
            --healthcheck.safe-enabled \
            {{- end }}
            --healthcheck.safe-interval={{ .Values.config.healthcheck.safeInterval }} \
            --healthcheck.unsafe-interval={{ .Values.config.healthcheck.unsafeInterval }} \
            --log.format={{ .Values.config.log.format }} \
            --log.level={{ .Values.config.log.level }} \
            {{- if .Values.config.metrics.enabled }}
            --metrics.enabled \
            --metrics.addr=0.0.0.0 \
            --metrics.port={{ .Values.config.metrics.port }} \
            {{- end }}
            {{- if .Values.config.network }}
            --network={{ .Values.config.network }} \
            {{- end }}
            {{- if .Values.config.paused }}
            --paused \
            {{- end }}

        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        ports:
        - containerPort: {{ .Values.config.rpc.port }}
          name: rpc
          protocol: TCP
        - containerPort: {{ .Values.config.consensus.port }}
          name: consensus
          protocol: TCP
        - containerPort: {{ .Values.config.metrics.port }}
          name: metrics
          protocol: TCP
        volumeMounts:
        - mountPath: /raft
          name: data
      volumes:
      - name: scripts
        configMap:
          name: {{ template "op-conductor.fullname" . }}-scripts
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      {{- with .Values.persistence.pvc.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      name: data
    spec:
      accessModes:
      - {{ .Values.persistence.pvc.accessMode }}
      resources:
        requests:
          storage: {{ .Values.persistence.pvc.size | quote }}
      {{- if .Values.persistence.pvc.storageClass }}
      storageClassName: {{ .Values.persistence.pvc.storageClass }}
      {{- end }}
      volumeMode: Filesystem
