apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "op-conductor-start-tool.labels" . | nindent 4 }}
    component: op-conductor-start-tool
spec:
  schedule: "{{ .Values.schedule }}"
  suspend: {{ .Values.suspend }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            {{- include "op-conductor-start-tool.labels" . | nindent 12 }}
        spec:
          containers:
          - name: switch-and-start
            image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            args:
            - |
              apk add curl
              apk add jq

              first=0
              last=$(( {{ .Values.opNode.replicas }} - 1 ))

              echo "Check OP Node status"
              i=0
              while [ $i -lt {{ .Values.opNode.replicas }} ]
              do
                echo "Checking OP Node $i"
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"admin_sequencerActive","params":[],"id":1}'  \
                  {{ .Values.opNode.protocol }}://{{ .Values.opNode.namePattern }}-$i:{{ .Values.opNode.port }} -s | jq .result > /tmp/RESULT_NODE_${i}_ACTIVE
                echo "OP Node $i active? $(cat /tmp/RESULT_NODE_${i}_ACTIVE)"
                i=$((i + 1))
              done

              echo "Check OP Conductor status"
              i=0
              while [ $i -lt {{ .Values.opConductor.replicas }} ]
              do
                echo "Checking OP Conductor $i"
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_stopped","params":[],"id":1}'  \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$i:{{ .Values.opConductor.rpc.port }} -s | jq .result > /tmp/RESULT_COND_${i}_STOPPED
                echo "OP Conductor $i stopped? $(cat /tmp/RESULT_COND_${i}_STOPPED)"
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_paused","params":[],"id":1}'  \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$i:{{ .Values.opConductor.rpc.port }} -s | jq .result > /tmp/RESULT_COND_${i}_PAUSED
                echo "OP Conductor $i paused? $(cat /tmp/RESULT_COND_${i}_PAUSED)"
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_sequencerHealthy","params":[],"id":1}'  \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$i:{{ .Values.opConductor.rpc.port }} -s | jq .result > /tmp/RESULT_COND_${i}_SEQ_HEALTHY
                echo "OP Conductor $i sequencer healthy? $(cat /tmp/RESULT_COND_${i}_SEQ_HEALTHY)"
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_leader","params":[],"id":1}'  \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$i:{{ .Values.opConductor.rpc.port }} -s | jq .result > /tmp/RESULT_COND_${i}_LEADER
                echo "OP Conductor $i leader? $(cat /tmp/RESULT_COND_${i}_LEADER)"
                i=$((i + 1))
              done

              if [ $(cat /tmp/RESULT_NODE_0_ACTIVE) = "true" ] && [ $(cat /tmp/RESULT_NODE_2_ACTIVE) = "false" ] && \
                 [ $(cat /tmp/RESULT_COND_2_STOPPED) = "false" ] && \
                 [ $(cat /tmp/RESULT_COND_2_PAUSED) = "true" ] && \
                 [ $(cat /tmp/RESULT_COND_2_SEQ_HEALTHY) = "true" ] && \
                 [ $(cat /tmp/RESULT_COND_2_LEADER) = "true" ]; then
                echo "Requirements for switch and start are met"
                SWITCH=true
              else
                echo "Requirements for switch and start are NOT met. Skipping..."
                SWITCH=false
              fi

              if [ $SWITCH = true ]; then
                echo "Stopping OP Node $first"
                LAST_UNSAFE_HASH=$(curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"admin_stopSequencer","params":[],"id":1}' \
                  {{ .Values.opNode.protocol }}://{{ .Values.opNode.namePattern }}-$first:{{ .Values.opNode.port }} -s | jq -r .result)
                echo "Stopped OP Node $first with unsafe hash $LAST_UNSAFE_HASH. Sleeping 1 second and starting OP Node $last..."
                sleep 1
                curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"admin_startSequencer","params":["'${LAST_UNSAFE_HASH}'"],"id":1}'  \
                  {{ .Values.opNode.protocol }}://{{ .Values.opNode.namePattern }}-$last:{{ .Values.opNode.port }} -s
                echo "Started OP Node $last, checking OP Node $last status..."
                STARTED=$(curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"admin_sequencerActive","params":[],"id":1}'  \
                  {{ .Values.opNode.protocol }}://{{ .Values.opNode.namePattern }}-$last:{{ .Values.opNode.port }} -s | jq .result)
                if [ "$STARTED" = true ]; then
                  echo "OP Node $last is active"
                else
                  echo "Failed to start OP Node $last"
                  echo "admin_sequencerActive result: $STARTED"
                  echo "Falling back to activating OP Node $first"
                  curl -X POST -H "Content-Type: application/json" --data \
                    '{"jsonrpc":"2.0","method":"admin_startSequencer","params":["'${LAST_UNSAFE_HASH}'"],"id":1}'  \
                    {{ .Values.opNode.protocol }}://{{ .Values.opNode.namePattern }}-$first:{{ .Values.opNode.port }} -s
                  exit 1
                fi
              fi

              echo "Checking raft cluster..."
              CLUSTER_MEMBERS=$(curl -X POST -H "Content-Type: application/json" --data \
                '{"jsonrpc":"2.0","method":"conductor_clusterMembership","params":[],"id":1}' \
                {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$last:{{ .Values.opConductor.rpc.port }} -s | jq '.result.servers | length')
              echo "Current raft cluster members: $CLUSTER_MEMBERS"
              if [ "$CLUSTER_MEMBERS" = 1 ]; then
                echo "Forming raft cluster..."
                echo "Checking OP Conductor $last is leader"
                CHECK_LEADER=$(curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_leader","params":[],"id":1}' \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$last:{{ .Values.opConductor.rpc.port }} -s | jq .result)
                if [ "$CHECK_LEADER" = false ]; then
                  echo "OP Conductor $last is NOT the leader, exiting..."
                  exit 1
                fi
                i=0
                echo "Sending addServerAsVoter to OP Conductor $last"
                while [ $i -lt $(( {{ .Values.opNode.replicas }} - 1 )) ]
                do
                  echo "Sending addServerAsVoter to OP Conductor $last for member $i"
                  curl -X POST -H "Content-Type: application/json" --data \
                      '{"jsonrpc":"2.0","method":"conductor_addServerAsVoter","params":["'${i}'", "{{ .Values.opConductor.consensus.namePattern }}-'${i}':{{ .Values.opConductor.consensus.port }}", 0],"id":1}'  \
                      {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$last:{{ .Values.opConductor.rpc.port }} -s
                  i=$((i + 1))
                done
                CLUSTER_MEMBERS=$(curl -X POST -H "Content-Type: application/json" --data \
                  '{"jsonrpc":"2.0","method":"conductor_clusterMembership","params":[],"id":1}' \
                  {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$last:{{ .Values.opConductor.rpc.port }} -s | jq '.result.servers | length')
                if [ "$CLUSTER_MEMBERS" = {{ .Values.opNode.replicas }} ]; then
                  echo "Done forming raft cluster"
                else
                  echo "Failed to form raft cluster. Exiting..."
                  curl -X POST -H "Content-Type: application/json" --data \
                    '{"jsonrpc":"2.0","method":"conductor_clusterMembership","params":[],"id":1}' \
                    {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$last:{{ .Values.opConductor.rpc.port }} -s
                  exit 1
                fi
              else
                echo "Raft cluster already formed"
              fi

              if [ $(cat /tmp/RESULT_COND_0_PAUSED) = "true" ] && \
                 [ $(cat /tmp/RESULT_COND_1_PAUSED) = "true" ] && \
                 [ $(cat /tmp/RESULT_COND_2_PAUSED) = "true" ]; then
                echo "Conductors are paused"
                UNPAUSE=true
              else
                echo "Conductors are NOT paused. Skipping..."
                UNPAUSE=false
              fi

              if [ $UNPAUSE = true ]; then
                echo "Unpausing OP Conductors..."
                i=0
                while [ $i -lt {{ .Values.opConductor.replicas }} ]
                do
                  echo "Sending conductor_resume to OP Conductor $i"
                  curl -X POST -H "Content-Type: application/json" --data \
                        '{"jsonrpc":"2.0","method":"conductor_resume","params":[],"id":1}'  \
                        {{ .Values.opConductor.protocol }}://{{ .Values.opConductor.rpc.namePattern }}-$i:{{ .Values.opConductor.rpc.port }} -s
                  i=$((i + 1))
                done
                echo "OP Conductors unpaused."
              fi

          restartPolicy: Never
