apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "op-proposer.fullname" . }}
  labels:
    {{- include "op-proposer.labels" . | nindent 4 }}
  {{- with .Values.statefulset.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "op-proposer.name" . }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "op-proposer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "op-proposer.selectorLabels" . | nindent 8 }}
      annotations:
      {{- with .Values.statefulset.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.config.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.config.metrics.port }}"
        prometheus.io/path: "/metrics"
      {{- end }}
    spec:
      enableServiceLinks: false
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "op-proposer.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.init.contracts.enabled }}
      - name: contracts
        image: {{ .Values.init.contracts.image.repository }}:{{ .Values.init.contracts.image.tag }}
        imagePullPolicy: {{ .Values.init.contracts.image.pullPolicy | quote }}
        command:
        - /bin/sh
        - -c
        args:
        - |
          datadir=/contracts
          while ! wget -qO $datadir/deployment-l1.json "{{ .Values.init.contracts.url }}"; do
            echo "wget failed, retrying..."
            sleep 5 # Wait for 5 seconds before retrying
          done
          L2OutputOracleProxy=$(cat $datadir/deployment-l1.json | grep L2OutputOracleProxy | cut -d'"' -f4)
          echo $L2OutputOracleProxy > $datadir/L2OutputOracleProxy
          echo "L2OutputOracleProxy: $L2OutputOracleProxy"
        volumeMounts:
        - name: contracts
          mountPath: /contracts
      {{- end }}
      {{- with .Values.initContainers }}
        {{- tpl (toYaml . | nindent 6) $ }}
      {{- end }}
      containers:
      - name: op-proposer
        image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .Values.command }}
        command:
          {{- tpl (toYaml .Values.command) $ | nindent 10 }}
        {{- else }}
        command:
        - /bin/sh
        - -c
        {{- end }}
        args:
        - |
          [ -f /contracts/L2OutputOracleProxy ] && L2OutputOracleProxy=$(cat /contracts/L2OutputOracleProxy) || L2OutputOracleProxy={{ .Values.config.L2OutputOracle }}
          exec op-proposer \
            --poll-interval={{ .Values.config.pollInterval }} \
            --rpc.port={{ .Values.config.rpc.port }} \
            --rollup-rpc={{ .Values.config.rollupRpc }} \
            --l2oo-address=$L2OutputOracleProxy \
            --l1-eth-rpc=$L1_URL \
            {{- if .Values.config.metrics.enabled }}
            --metrics.enabled \
            --metrics.addr={{ .Values.config.metrics.addr }} \
            --metrics.port={{ .Values.config.metrics.port }} \
            {{- end }}
            --log.level={{ .Values.config.logs.level }} \
            --log.format={{ .Values.config.logs.format }} \
            --log.color={{ .Values.config.logs.color }} \
            {{- if .Values.config.signer.enabled }}
            --signer.address={{ .Values.config.signer.address }} \
            --signer.endpoint={{ .Values.config.signer.endpoint }} \
            {{- if .Values.config.signer.tls.enabled }}
            {{- if .Values.config.signer.tls.certManager.enabled }}
            --signer.tls.ca="/certs/ca.crt" \
            --signer.tls.cert="/certs/tls.crt" \
            --signer.tls.key="/certs/tls.key" \
            {{- else }}
            --signer.tls.ca="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretCaKey }}" \
            --signer.tls.cert="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretCertKey }}" \
            --signer.tls.key="/certs/{{ .Values.config.signer.tls.externalSecret.tlsSecretKeyKey }}" \
            {{- end }}
            {{- else }}
            --signer.tls.ca="" \
            --signer.tls.cert="" \
            --signer.tls.key="" \
            {{- end }}
            {{- end }}
            {{- with .Values.extraArgs }}
            {{- range . }}
            {{- tpl (.) $ | nindent 12 }} \
            {{- end }}
            {{- end }}

        env:
        - name: OP_PROPOSER_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ ternary (include "op-proposer.fullname" .) .Values.secrets.privateKey.secretName (not (empty .Values.secrets.privateKey.value)) }}
              key: {{ ternary "privateKey" .Values.secrets.privateKey.secretKey (not (empty .Values.secrets.privateKey.value)) }}
        - name: L1_URL
          valueFrom:
            secretKeyRef:
              name: {{ ternary (include "op-proposer.fullname" .) .Values.secrets.l1Url.secretName (not (empty .Values.secrets.l1Url.value)) }}
              key: {{ ternary "l1Url" .Values.secrets.l1Url.secretKey (not (empty .Values.secrets.l1Url.value)) }}
        ports:
        - name: rpc
          containerPort: {{ .Values.config.rpc.port }}
        {{- if .Values.config.metrics }}
        - name: metrics
          containerPort: {{ .Values.config.metrics.port }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          {{- include "op-proposer.healthcheck" (list $ .Values.livenessProbe) | nindent 10 }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          {{- include "op-proposer.healthcheck" (list $ .Values.readinessProbe) | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: contracts
          mountPath: /contracts
        {{- if .Values.config.signer.tls.enabled }}
        - mountPath: "/certs"
          name: pki
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.sidecarContainers }}
        {{- tpl (toYaml . | nindent 6) $ }}
      {{- end }}
      volumes:
      - name: contracts
        emptyDir: {}
      {{- if .Values.config.signer.tls.enabled }}
      - name: pki
        secret:
          secretName: {{ ternary (include "op-proposer.fullname" .) .Values.config.signer.tls.externalSecret.tlsSecretName .Values.config.signer.tls.certManager.enabled }}
      {{- end }}
